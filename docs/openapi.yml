openapi: 3.0.0
info:
  title: Shrtnr URL shortener
  description: API documentation for the Shrtnr suite of open source URL shortners.
  contact:
    name: Nathan Fritz
    url: http://nbfritz.com
    email: nbfritz@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: "1.0.0"

servers:
  - url: http://localhost:3000/api

tags:
  - name: admin
    description: Administrative endpoints
  - name: user
    description: User-restricted endpoints
  - name: public 
    description: Public endpoints

paths:
  /users/auth:
    post:
      description: Authenticate a user
      operationId: userAuth
      requestBody:
        description: "Authentication credentials"
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/AuthCreds" }
      responses:
        200:
          description: "Success with a JWT bearer token"
          content:
            application/json:
              schema: { $ref: "#/components/schemas/TokenResponse" }
      tags: [ public ]

  /users:
    get:
      description: "Retrieve a list of users"
      operationId: userGetList
      security: [ { "BearerAuth": [] } ]
      parameters:
        - name: page
          in: query
          description: "Results page to be displayed (starts at 1)"
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: "A list of users."
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UserList" }
      tags: [ admin ]

    post:
      description: "Create a new user"
      operationId: userPost
      security: [ { "BearerAuth": [] } ]
      requestBody:
        description: "Attributes defining a new user to be inserted"
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UserParams" }
      responses:
        201:
          description: "Successfully created with location header set for new user"
          headers:
            Location:
              description: "URL for the newly created user"
              schema:
                type: string
                example: "http://localhost/api/user/1"
      tags: [ admin ]

components:
  schemas:
    AuthCreds:
      type: object
      properties:
        email:
          type: string
          format: email
          example: admin@example.com
        password:
          type: string
          example: password
        password_confirmation:
          type: string
          example: password
      required:
        - email
        - password
        - password_confirmation

    TokenResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbkBleGFtcGxlLmNvbSJ9.pYqYBEbm52bgvPDMbFYydJMBwOSjVSSeGZ5w_tmtqCY"

    UserCommon:
      type: object
      properties:
        email:
          type: string
          description: "Email address associated with user account"
          format: email
          example: "admin@example.com"

    UserParams:
      type: object
      properties:
        user: 
          allOf:
            - $ref: "#/components/schemas/UserCommon"
            - type: object
              properties:
                password:
                  type: string
                  description: "Password to be set for the user"
                  format: password
                  example: "password"
                password_confirmation:
                  type: string
                  description: "Password a 2nd time for confirmation purposes"
                  format: password 
                  example: "password"

    User:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              example: 1
        - $ref: "#/components/schemas/UserCommon"
        - type: object
          properties:
            admin:
              type: boolean
              description: "True if the user is an administrator"
              example: true
            created_at:
              type: string
              description: "Date and time that the user was created"
              format: "date-time"
            updated_at:
              type: string
              description: "Date and time that the user was last updated"
              format: "date-time"

    UserList:
      allOf:
        - $ref: "#/components/schemas/PaginatedResults"
        - type: object
          properties:
            users:
              type: array
              description: "List of user objects"
              items: { $ref: "#/components/schemas/User" }

    PaginatedResults:
      type: object
      properties:
        total:
          type: integer
          description: "Total number of results available"
          example: 1
        page:
          type: integer
          description: "Page of results shown"
          example: 1
        per_page:
          type: integer
          description: "Number of results shown per page"
          example: 20

    NotFoundError:
      type: object
      properties:
        error_message:
          type: string

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT



