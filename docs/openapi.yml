openapi: 3.0.0
info:
  title: Shrtnr URL shortener
  description: API documentation for the Shrtnr suite of open source URL shortners.
  contact:
    name: Nathan Fritz
    url: http://nbfritz.com
    email: nbfritz@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: "1.0.0"

servers:
  - url: http://localhost:3000

tags:
  - name: admin
    description: Administrative endpoints
  - name: user
    description: User-restricted endpoints
  - name: public 
    description: Public endpoints

paths:
  /api/users/auth:
    post:
      description: Authenticate a user
      operationId: userAuth
      requestBody:
        description: "Authentication credentials"
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/AuthCreds" }
      responses:
        200:
          description: "Success with a JWT bearer token"
          content:
            application/json:
              schema:
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbkBleGFtcGxlLmNvbSJ9.pYqYBEbm52bgvPDMbFYydJMBwOSjVSSeGZ5w_tmtqCY"
        304: { $ref: "#/components/responses/UnauthorizedError" }
      tags: [ public ]

  /api/users:
    get:
      description: "Retrieve a list of users"
      operationId: userGetList
      security: [ { "BearerAuth": [] } ]
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PerPage"
      responses:
        200:
          description: "A list of users"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResults"
                  - properties:
                      users:
                        type: array
                        description: "List of user objects"
                        items: { $ref: "#/components/schemas/User" }
        304: { $ref: "#/components/responses/UnauthorizedError" }
      tags: [ admin ]

    post:
      description: "Create a new user"
      operationId: userPost
      security: [ { "BearerAuth": [] } ]
      requestBody:
        description: "Attributes defining a new user to be inserted"
        content:
          application/json:
            schema: 
              properties: 
                user: { $ref: "#/components/schemas/UserParams" }
      responses:
        201:
          description: "Successfully created with location header set for new user"
          headers:
            Location:
              description: "URL for the newly created user"
              schema:
                type: string
                example: "http://localhost/api/users/1"
        304: { $ref: "#/components/responses/UnauthorizedError" }
        400: { $ref: "#/components/responses/BadRequestError" }
      tags: [ admin ]

  /api/users/{id}:
    parameters:
      - name: id
        in: path
        description: "ID for the user being displayed, updated, or deleted"
        schema:
          type: integer
          example: 1
        required: true

    get:
      description: "Retrieve a single user"
      operationId: userGet
      security: [ { "BearerAuth": [] } ]
      responses:
        200:
          description: "A single user"
          content:
            application/json:
              schema: 
                properties:
                  user: { $ref: "#/components/schemas/User" }
        304: { $ref: "#/components/responses/UnauthorizedError" }
        404: { $ref: "#/components/responses/NotFoundError" }
      tags: [ admin ]

    put:
      description: "Update an existing user"
      operationId: userPut
      security: [ { "BearerAuth": [] } ]
      requestBody:
        description: "Attributes defining new values for the existing user"
        content:
          application/json:
            schema:
              properties: 
                user: { $ref: "#/components/schemas/UserParams" }
      responses:
        200:
          description: "Successfully updated with location header set for existing user"
          headers:
            Location:
              description: "URL for the updated user"
              schema:
                type: string
                example: "http://localhost/api/users/1"
        304: { $ref: "#/components/responses/UnauthorizedError" }
        400: { $ref: "#/components/responses/BadRequestError" }
        404: { $ref: "#/components/responses/NotFoundError" }
      tags: [ admin ]

    delete:
      description: "Remove a user from the system"
      operationId: userDelete
      security: [ { "BearerAuth": [] } ]
      responses:
        200:
          description: "A successful deletion"
        304: { $ref: "#/components/responses/UnauthorizedError" }
        404: { $ref: "#/components/responses/NotFoundError" }
      tags: [ admin ]


  /api/shortcodes:
    get:
      description: "Retrieve a list of shortcodes associated with the current user"
      operationId: shortcodeGetList
      security: [ { "BearerAuth": [] } ]
      responses: 
        200:
          description: "A list of shortcodes"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResults"
                  - properties:
                      shortcodes:
                        type: array
                        description: "List of shortcode objects"
                        items: { $ref: "#/components/schemas/Shortcode" }
        304: { $ref: "#/components/responses/UnauthorizedError" }
      tags: [ user ]

    post:
      description: "Create a new shortcode associated with the current user"
      operationId: shortcodePost
      security: [ { "BearerAuth": [] } ]
      requestBody:
        description: "Attributes defining new values for the new shortcode"
        content:
          application/json:
            schema:
              properties: 
                shortcode: { $ref: "#/components/schemas/ShortcodeParams" }
      responses:
        201:
          description: "Successfully created with location header set for new shortcode"
          headers:
            Location:
              description: "URL for the new shortcode"
              schema:
                type: string
                example: "http://localhost/api/shortcodes/1"
        304: { $ref: "#/components/responses/UnauthorizedError" }
        400: { $ref: "#/components/responses/BadRequestError" }
        404: { $ref: "#/components/responses/NotFoundError" }
      tags: [ user ]


  /api/shortcodes/{id}:
    parameters:
      - name: id
        in: path
        description: "ID for the shortcode being displayed, updated, or deleted"
        schema:
          type: integer
          example: 1
        required: true

    get:
      description: "Retrieve a single shortcode"
      operationId: shortcodeGet
      security: [ { "BearerAuth": [] } ]
      responses:
        200:
          description: "A single shortcode"
          content:
            application/json:
              schema: 
                properties:
                  shortcode: { $ref: "#/components/schemas/Shortcode" }
        304: { $ref: "#/components/responses/UnauthorizedError" }
        404: { $ref: "#/components/responses/NotFoundError" }
      tags: [ user ]

    put:
      description: ""
      operationId: shortcodePut
      security: [ { "BearerAuth": [] } ]
      requestBody:
        description: "Attributes defining new values for the existing shortcode"
        content:
          application/json:
            schema:
              properties: 
                shortcode: { $ref: "#/components/schemas/ShortcodeParams" }
      responses:
        200:
          description: "Successfully updated with location header set for existing shortcode"
          headers:
            Location:
              description: "URL for the updated shortcode"
              schema:
                type: string
                example: "http://localhost/api/shortcodes/1"
        304: { $ref: "#/components/responses/UnauthorizedError" }
        400: { $ref: "#/components/responses/BadRequestError" }
        404: { $ref: "#/components/responses/NotFoundError" }
      tags: [ user ]

    delete:
      description: ""
      operationId: shortcodeDelete
      security: [ { "BearerAuth": [] } ]
      responses:
        200:
          description: "A successful deletion"
        304: { $ref: "#/components/responses/UnauthorizedError" }
        404: { $ref: "#/components/responses/NotFoundError" }
      tags: [ user ]


  /api/shortcodes/{id}/visits:
    parameters:
      - name: id
        in: path
        description: "ID for the shortcode for which to display the visit list"
        schema:
          type: integer
          example: 1
        required: true

    get:
      description: "Retrieve a list of visits resolved via a given shortcode"
      operationId: shortcodeVisitsGet
      security: [ { "BearerAuth": [] } ]
      responses: 
        200:
          description: "A list of visits for the requested shortcode"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResults"
                  - properties:
                      visits:
                        type: array
                        description: "List of visit objects"
                        items: { $ref: "#/components/schemas/Visit" }
        304: { $ref: "#/components/responses/UnauthorizedError" }
        404: { $ref: "#/components/responses/NotFoundError" }
      tags: [ user ]


  /{key}:
    parameters:
      - name: key
        in: path
        description: "Shortcode key to resolve via a 302 redirect"
        schema:
          type: string
          example: "abc123"
        required: true

    get:
      description: "Resolve a shortcode to a url"
      operationId: shortcodeResolve
      responses: 
        302:
          description: "Redirect response to send client to appropriate URL"
          headers:
            Location:
              description: "Redirect target for the resolved shortcode"
              schema:
                type: string
                example: "https://www.example.com"
        404: { $ref: "#/components/responses/NotFoundError" }
      tags: [ public ]

components:
  schemas:
    AuthCreds:
      properties:
        email:
          type: string
          format: email
          example: admin@example.com
        password:
          type: string
          example: password
      required: [ email, password ]

    UserParams:
      properties:
        email:
          type: string
          description: "Email address associated with user account"
          format: email
          example: "admin@example.com"
        password:
          type: string
          description: "Password to be set for the user"
          format: password
          example: "password"
        password_confirmation:
          type: string
          description: "Password a 2nd time for confirmation purposes"
          format: password 
          example: "password"
      required: [ email, password, password_confirmation ]

    User:
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          description: "Email address associated with user account"
          format: email
        admin:
          type: boolean
          description: "True if the user is an administrator"
          example: true
        created_at:
          type: string
          description: "Date and time that the user was created"
          format: "date-time"
        updated_at:
          type: string
          description: "Date and time that the user was last updated"
          format: "date-time"

    ShortcodeParams:
      properties:
        key:
          type: string
          description: "Key to be used for resolving the shortcode"
          example: "abc123"
        url:
          type: string
          description: "Redirect target for this shortcode"
          example: "https://www.example.com"

    Shortcode:
      properties:
        id:
          type: integer
          example: 1
        key:
          type: string
          description: "Key to be used for resolving the shortcode"
          example: "abc123"
        url:
          type: string
          description: "Redirect target for this shortcode"
          example: "https://www.example.com"
        user:
          type: integer
          description: "URL for the user who owns this shortcode"
          example: "http://localhost:3000/users/1"
        created_at:
          type: string
          description: "Date and time that the shortcode was created"
          format: "date-time"
        updated_at:
          type: string
          description: "Date and time that the shortcode  was last updated"
          format: "date-time"

    Visit:
      properties:
        id:
          type: integer
          example: 1
        remote_ip:
          type: string
          description: "IP address for the visitor"
          example: "10.10.10.1"
        request:
          type: string
          description: "URL used to access resolver"
          example: "http://localhost:3000/abc123"
        target:
          type: string
          description: "URL used for resulting redirect"
          example: "https://www.example.com"
        referrer:
          type: string
          description: "HTTP Referrer associated with the request"
          example: "https://www.example.com/some-other-page"
        user_agent:
          type: string
          description: "User Agent reported by the client making the request"
          example: "Mozilla..."
        shortcode:
          type: string
          description: "URL for the shortcode associated with this visit"
          example: "http://localhost:3000/shortcodes/1"
        created_at:
          type: string
          description: "Date and time that the shortcode was created"
          format: "date-time"
        updated_at:
          type: string
          description: "Date and time that the shortcode  was last updated"
          format: "date-time"


    PaginatedResults:
      properties:
        total:
          type: integer
          description: "Total number of results available"
          example: 1
        page:
          type: integer
          description: "Page of results shown"
          example: 1
        per_page:
          type: integer
          description: "Number of results shown per page"
          example: 20

  parameters:
    Page:
      name: page
      in: query
      description: "Results page to be displayed (starts at 1)"
      schema:
        type: integer
        example: 1
    PerPage:
      name: per_page
      in: query
      description: "Number of results to be displayed per page (defaults to 20)"
      schema:
        type: integer
        example: 20

  responses:
    BadRequestError:
      description: "Response including a map of attributes to error messages"
      content:
        application/json:
          schema: 
            properties:
              error_messages:
                additionalProperties:
                  type: string
                example:
                  email: "must be unique"
                  password: "can't be blank"

    NotFoundError:
      description: "Response indicating that an entity was not found in the system"
      content:
        application/json:
          schema: 
            properties:
              error_message:
                type: string
                example: "user could not be found"

    UnauthorizedError:
      description: "Response indicating that the request is unauthorized"
      content:
        application/json:
          schema: 
            properties:
              error_message:
                type: string
                example: "user is unauthorized"


  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT



